{"version":3,"sources":["ng://ngx-mask/app/ngx-mask/config.ts","node_modules/tslib/tslib.es6.js","ng://ngx-mask/app/ngx-mask/mask-applier.service.ts","ng://ngx-mask/app/ngx-mask/mask.service.ts","ng://ngx-mask/app/ngx-mask/mask.directive.ts","ng://ngx-mask/app/ngx-mask/mask.pipe.ts","ng://ngx-mask/app/ngx-mask/ngx-mask.module.ts"],"names":["config","InjectionToken","NEW_CONFIG","INITIAL_CONFIG","initialConfig","sufix","prefix","clearIfNotMatch","showTemplate","showMaskTyped","dropSpecialCharacters","shownMaskExpression","specialCharacters","patterns","0","pattern","RegExp","9","optional","A","S","d","m","H","h","s","extendStatics","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","i","n","arguments","length","prototype","call","apply","this","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","step","op","TypeError","done","value","pop","push","e","__read","o","r","ar","error","MaskApplierService","_config","maskExpression","separator","str","x","split","decimals","res","rgx","test","replace","dotSeparator","comaSeparator","percentage","Number","_shift","Set","maskSpecialCharacters","maskAvailablePatterns","applyMaskWithPattern","inputValue","maskAndPattern","_a","mask","customPattern","applyMask","position","cb","undefined","cursor","result","multi","slice","inputArray","toString","match","substring","strForSep","shiftStep","add","inputSymbol","_checkSymbolMask","indexOf","_findSpecialChar","shift","newPosition","has","find","val","maskSymbol","Injectable","Inject","args","MaskService","document","_elementRef","_renderer","_this","_super","isNumberValue","maskIsShown","onChange","onTouch","_formElement","nativeElement","__extends","__","constructor","create","tslib_1.__extends","showMaskInInput","isArray","_removeMask","_removeSufix","_removePrefix","resLen","applyValueChanges","maskedInput","activeElement","clearIfNotMatchFn","Error","formElementProperty","defineProperty","_b","name","setProperty","specialCharactersForRemove","_regExpForRemove","map","item","join","DOCUMENT","ElementRef","Renderer2","MaskDirective","_maskService","_position","_maskValue","_repeatPatternSymbols","_inputValue","onInput","el","caretShift","selectionStart","selectionEnd","inputType","onBlur","onFocus","keyCode","a","preventDefault","onPaste","MAX_SAFE_INTEGER","writeValue","__awaiter","_arguments","P","generator","Promise","resolve","reject","fulfilled","rejected","then","String","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","maskExp","reduce","accum","currval","index","_start","_end","repeatNumber","Directive","selector","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","Input","HostListener","MaskPipe","transform","Pipe","pure","NgxMaskModule","forRoot","configValue","ngModule","useValue","useFactory","_configFactory","deps","forChild","NgModule","exports","declarations","initConfig"],"mappings":"iXAoBA,IAAaA,EAAiC,IAAIC,EAAAA,eAAe,UACpDC,EAAqC,IAAID,EAAAA,eAAe,cACxDE,EAA0C,IAAIF,EAAAA,eAAe,kBAE7DG,EAAyB,CAClCC,MAAO,GACPC,OAAQ,GACRC,iBAAiB,EACjBC,cAAc,EACdC,eAAe,EACfC,uBAAuB,EACvBC,oBAAqB,GACrBC,kBAAmB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAM,KACtFC,SAAU,CACNC,EAAK,CACDC,QAAS,IAAIC,OAAO,QAExBC,EAAK,CACDF,QAAS,IAAIC,OAAO,OACpBE,UAAU,GAEdC,EAAK,CACDJ,QAAS,IAAIC,OAAO,gBAExBI,EAAK,CACDL,QAAS,IAAIC,OAAO,aAExBK,EAAK,CACDN,QAAS,IAAIC,OAAO,QAExBM,EAAK,CACDP,QAAS,IAAIC,OAAO,QAExBO,EAAK,CACDR,QAAS,IAAIC,OAAO,QAExBQ,EAAK,CACDT,QAAS,IAAIC,OAAO,QAExBS,EAAK,CACDV,QAAS,IAAIC,OAAO,UC5C5BU,EAAgB,SAASL,EAAGM,GAI5B,OAHAD,EAAgBE,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUV,EAAGM,GAAKN,EAAES,UAAYH,IACvE,SAAUN,EAAGM,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIX,EAAEW,GAAKL,EAAEK,MACpDX,EAAGM,IASrB,IAAIO,EAAW,WAQlB,OAPAA,EAAWN,OAAOO,QAAU,SAAkBC,GAC1C,IAAK,IAAIX,EAAGY,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAIL,KADTP,EAAIc,UAAUF,GACOT,OAAOa,UAAUR,eAAeS,KAAKjB,EAAGO,KAAII,EAAEJ,GAAKP,EAAEO,IAE9E,OAAOI,IAEKO,MAAMC,KAAML,YAqChC,SAAgBM,EAAYC,EAASC,GACjC,IAAsGC,EAAGC,EAAGb,EAAGc,EAA3GC,EAAI,CAAEC,MAAO,EAAGC,KAAM,WAAa,GAAW,EAAPjB,EAAE,GAAQ,MAAMA,EAAE,GAAI,OAAOA,EAAE,IAAOkB,KAAM,GAAIC,IAAK,IAChG,OAAOL,EAAI,CAAEM,KAAMC,EAAK,GAAIC,QAASD,EAAK,GAAIE,SAAUF,EAAK,IAAwB,mBAAXG,SAA0BV,EAAEU,OAAOC,UAAY,WAAa,OAAOjB,OAAUM,EACvJ,SAASO,EAAKnB,GAAK,OAAO,SAAUwB,GAAK,OACzC,SAASC,EAAKC,GACV,GAAIhB,EAAG,MAAM,IAAIiB,UAAU,mCAC3B,KAAOd,GAAG,IACN,GAAIH,EAAI,EAAGC,IAAMb,EAAY,EAAR4B,EAAG,GAASf,EAAU,UAAIe,EAAG,GAAKf,EAAS,YAAOb,EAAIa,EAAU,YAAMb,EAAEM,KAAKO,GAAI,GAAKA,EAAEO,SAAWpB,EAAIA,EAAEM,KAAKO,EAAGe,EAAG,KAAKE,KAAM,OAAO9B,EAE3J,OADIa,EAAI,EAAGb,IAAG4B,EAAK,CAAS,EAARA,EAAG,GAAQ5B,EAAE+B,QACzBH,EAAG,IACP,KAAK,EAAG,KAAK,EAAG5B,EAAI4B,EAAI,MACxB,KAAK,EAAc,OAAXb,EAAEC,QAAgB,CAAEe,MAAOH,EAAG,GAAIE,MAAM,GAChD,KAAK,EAAGf,EAAEC,QAASH,EAAIe,EAAG,GAAIA,EAAK,CAAC,GAAI,SACxC,KAAK,EAAGA,EAAKb,EAAEI,IAAIa,MAAOjB,EAAEG,KAAKc,MAAO,SACxC,QACI,KAAkBhC,EAAe,GAA3BA,EAAIe,EAAEG,MAAYd,QAAcJ,EAAEA,EAAEI,OAAS,MAAkB,IAAVwB,EAAG,IAAsB,IAAVA,EAAG,IAAW,CAAEb,EAAI,EAAG,SACjG,GAAc,IAAVa,EAAG,MAAc5B,GAAM4B,EAAG,GAAK5B,EAAE,IAAM4B,EAAG,GAAK5B,EAAE,IAAM,CAAEe,EAAEC,MAAQY,EAAG,GAAI,MAC9E,GAAc,IAAVA,EAAG,IAAYb,EAAEC,MAAQhB,EAAE,GAAI,CAAEe,EAAEC,MAAQhB,EAAE,GAAIA,EAAI4B,EAAI,MAC7D,GAAI5B,GAAKe,EAAEC,MAAQhB,EAAE,GAAI,CAAEe,EAAEC,MAAQhB,EAAE,GAAIe,EAAEI,IAAIc,KAAKL,GAAK,MACvD5B,EAAE,IAAIe,EAAEI,IAAIa,MAChBjB,EAAEG,KAAKc,MAAO,SAEtBJ,EAAKjB,EAAKL,KAAKI,EAASK,GAC1B,MAAOmB,GAAKN,EAAK,CAAC,EAAGM,GAAIrB,EAAI,UAAeD,EAAIZ,EAAI,EACtD,GAAY,EAAR4B,EAAG,GAAQ,MAAMA,EAAG,GAAI,MAAO,CAAEG,MAAOH,EAAG,GAAKA,EAAG,QAAK,EAAQE,MAAM,GArB9BH,CAAK,CAACzB,EAAGwB,MAyB7D,SAegBS,EAAOC,EAAGlC,GACtB,IAAIhB,EAAsB,mBAAXsC,QAAyBY,EAAEZ,OAAOC,UACjD,IAAKvC,EAAG,OAAOkD,EACf,IAAmBC,EAAYH,EAA3BjC,EAAIf,EAAEoB,KAAK8B,GAAOE,EAAK,GAC3B,IACI,WAAc,IAANpC,GAAsB,EAANA,QAAcmC,EAAIpC,EAAEmB,QAAQU,MAAMQ,EAAGL,KAAKI,EAAEN,OAExE,MAAOQ,GAASL,EAAI,CAAEK,MAAOA,WAEzB,IACQF,IAAMA,EAAEP,OAAS5C,EAAIe,EAAU,YAAIf,EAAEoB,KAAKL,WAExC,GAAIiC,EAAG,MAAMA,EAAEK,OAE7B,OAAOD,mBChHP,SAAAE,EAC8BC,GAAAjC,KAAAiC,QAAAA,EAXvBjC,KAAAkC,eAAyB,GACzBlC,KAAAjC,oBAA8B,GAoQ7BiC,KAAAmC,UAAY,SAACC,GAMjB,QAJMC,GADND,GAAO,IACiBE,MAAM,KACxBC,EAA8B,EAAXF,EAAEzC,OAAa,IAAIyC,EAAE,GAAO,GACjDG,EAAcH,EAAE,GACdI,EAAc,eACbA,EAAIC,KAAKF,IACZA,EAAMA,EAAIG,QAAQF,EAAK,SAE3B,OAAOD,EAAMD,GAGTvC,KAAA4C,aAAe,SAACR,GAMpB,QAJMC,GADND,GAAO,IACiBE,MAAM,KACxBC,EAA8B,EAAXF,EAAEzC,OAAa,IAAIyC,EAAE,GAAO,GACjDG,EAAcH,EAAE,GACdI,EAAc,eACbA,EAAIC,KAAKF,IACZA,EAAMA,EAAIG,QAAQF,EAAK,SAE3B,OAAOD,EAAMD,GAGTvC,KAAA6C,cAAgB,SAACT,GAMrB,QAJMC,GADND,GAAO,IACiBE,MAAM,KACxBC,EAA8B,EAAXF,EAAEzC,OAAa,IAAIyC,EAAE,GAAO,GACjDG,EAAcH,EAAE,GACdI,EAAc,eACbA,EAAIC,KAAKF,IACZA,EAAMA,EAAIG,QAAQF,EAAK,SAE3B,OAAOD,EAAMD,GAGTvC,KAAA8C,WAAa,SAACV,GAClB,OAAsB,GAAfW,OAAOX,IAAaW,OAAOX,IAAQ,KA7R1CpC,KAAKgD,OAAS,IAAIC,IAClBjD,KAAKkD,sBAAwBlD,KAAY,QAAEhC,kBAC3CgC,KAAKmD,sBAAwBnD,KAAKiC,QAAQhE,SAC1C+B,KAAKrC,gBAAkBqC,KAAKiC,QAAQtE,gBACpCqC,KAAKlC,sBAAwBkC,KAAKiC,QAAQnE,sBAC1CkC,KAAKkD,sBAAwBlD,KAAY,QAAEhC,kBAC3CgC,KAAKmD,sBAAwBnD,KAAKiC,QAAQhE,SAC1C+B,KAAKtC,OAASsC,KAAKiC,QAAQvE,OAC3BsC,KAAKvC,MAAQuC,KAAKiC,QAAQxE,MAuRlC,OAlRWuE,EAAAnC,UAAAuD,qBAAP,SAA4BC,EAAoBC,GACtC,IAAAC,EAAA5B,EAAA2B,EAAA,GAACE,EAAAD,EAAA,GAAME,EAAAF,EAAA,GAEb,OADAvD,KAAKyD,cAAgBA,EACdzD,KAAK0D,UAAUL,EAAYG,IAE/BxB,EAAAnC,UAAA6D,UAAP,SACIL,EACAnB,EACAyB,EACAC,GAEA,QAHA,IAAAD,IAAAA,EAAA,QACA,IAAAC,IAAAA,EAAA,cAEIP,IAAeQ,WAA4B,OAAfR,GAAuBnB,IAAmB2B,UACtE,MAAO,OAEPC,EAAiB,EACjBC,EAAiB,GACjBC,GAAiB,EAEjBX,EAAWY,MAAM,EAAGjE,KAAKtC,OAAOkC,UAAYI,KAAKtC,SACjD2F,EAAaA,EAAWY,MAAMjE,KAAKtC,OAAOkC,OAAQyD,EAAWzD,aAG3DsE,EAAuBb,EAAWc,WACnC7B,MAAM,IACX,GAAuB,YAAnBJ,GACImB,EAAWe,MAAM,gBAAkBf,EAAWe,MAAM,wCACpDf,EAAaA,EAAWgB,UAAU,EAAGhB,EAAWzD,OAAS,IAGzDmE,EADA/D,KAAK8C,WAAWO,GACPA,EAEAA,EAAWgB,UAAU,EAAGhB,EAAWzD,OAAS,QAEtD,GAAuB,cAAnBsC,EAAgC,EACnCmB,EAAWe,MAAM,gBAAkBf,EAAWe,MAAM,sCACpDf,EAAaA,EAAWgB,UAAU,EAAGhB,EAAWzD,OAAS,QAEvD0E,EAAoBjB,EAAWV,QAAQ,MAAO,IAGpDmB,EADAH,GADAI,EAAS/D,KAAKmC,UAAUmC,IACN1E,OAAS,MAErB2E,EAAoB,SAAS7B,KAAKR,EAAe+B,MAAM,EAAGH,IAC1DI,EAAWtE,OACXkE,EACN9D,KAAKgD,OAAOwB,IAAID,EAAYvE,KAAKtC,OAAOkC,QAAU,QAC/C,GAAuB,kBAAnBsC,EAAoC,EACvCmB,EAAWe,MAAM,gBAAkBf,EAAWe,MAAM,sCACpDf,EAAaA,EAAWgB,UAAU,EAAGhB,EAAWzD,OAAS,IAEvD0E,EAAoBjB,EAAWV,QAAQ,MAAO,IAGpDmB,EADAH,GADAI,EAAS/D,KAAK4C,aAAa0B,IACT1E,OAAS,EAErB2E,EAAoB,SAAS7B,KAAKR,EAAe+B,MAAM,EAAGH,IAC1DI,EAAWtE,OACXkE,EACN9D,KAAKgD,OAAOwB,IAAID,EAAYvE,KAAKtC,OAAOkC,QAAU,QAC/C,GAAuB,mBAAnBsC,EAAqC,EACxCmB,EAAWe,MAAM,gBAAkBf,EAAWe,MAAM,sCACpDf,EAAaA,EAAWgB,UAAU,EAAGhB,EAAWzD,OAAS,IAEvD0E,EAAoBjB,EAAWV,QAAQ,MAAO,IAGpDmB,EADAH,GADAI,EAAS/D,KAAK6C,cAAcyB,IACV1E,OAAS,EAErB2E,EAAoB,SAAS7B,KAAKR,EAAe+B,MAAM,EAAGH,IAC1DI,EAAWtE,OACXkE,EACN9D,KAAKgD,OAAOwB,IAAID,EAAYvE,KAAKtC,OAAOkC,QAAU,QAGlD,IAAK,IAAIH,EAAY,EAAGgF,EAAsBP,EAAW,GAAIzE,EACvDyE,EAAWtE,QACTkE,IAAW5B,EAAetC,OADH6E,EAAcP,IAApBzE,GAIrB,GAAIO,KAAK0E,iBAAiBD,EAAavC,EAAe4B,KAA2C,MAA/B5B,EAAe4B,EAAS,GACtFC,GAAUU,EACVX,GAAU,OACP,GAC4B,MAA/B5B,EAAe4B,EAAS,IAAcE,GACnChE,KAAK0E,iBAAiBD,EAAavC,EAAe4B,EAAS,IAE9DC,GAAUU,EACVX,GAAU,EACVE,GAAQ,OACL,GAAIhE,KAAK0E,iBAAiBD,EAAavC,EAAe4B,KAErD,MADD5B,EAAe4B,EAAS,GAE3BC,GAAUU,EACVT,GAAQ,OACL,GAAmC,MAA/B9B,EAAe4B,EAAS,IAAc9D,KAAK0E,iBAClDD,EACAvC,EAAe4B,EAAS,IAExBC,GAAUU,EACVX,GAAU,OACP,GAAI9D,KAAK0E,iBAAiBD,EAAavC,EAAe4B,IAAU,CACnE,GAA+B,MAA3B5B,EAAe4B,IACW,EAAtBf,OAAO0B,GAAkB,CACzBV,GAAU,EACVD,GAAU,EACJS,EAAoB,SAAS7B,KAAKR,EAAe+B,MAAM,EAAGH,IAC1DI,EAAWtE,OACXkE,EACN9D,KAAKgD,OAAOwB,IAAID,EAAYvE,KAAKtC,OAAOkC,QAAU,GAClDH,IACA,SAEN,GAA+B,MAA3ByC,EAAe4B,IACF,MAAXC,GAAwC,EAAtBhB,OAAO0B,GACzB,SAGR,GAA+B,MAA3BvC,EAAe4B,IACW,EAAtBf,OAAO0B,GAAkB,CACzBV,GAAU,EACVD,GAAU,EACJS,EAAoB,SAAS7B,KAAKR,EAAe+B,MAAM,EAAGH,IAC1DI,EAAWtE,OACXkE,EACN9D,KAAKgD,OAAOwB,IAAID,EAAYvE,KAAKtC,OAAOkC,QAAU,GAClDH,IACA,SAGR,GAA+B,MAA3ByC,EAAe4B,IACW,EAAtBf,OAAO0B,GAAkB,CACzBV,GAAU,EACVD,GAAU,EACJS,EAAoB,SAAS7B,KAAKR,EAAe+B,MAAM,EAAGH,IAC1DI,EAAWtE,OACXkE,EACN9D,KAAKgD,OAAOwB,IAAID,EAAYvE,KAAKtC,OAAOkC,QAAU,GAClDH,IACA,SAGRsE,GAAUU,EACVX,SACG,GAAI9D,KAAK0E,iBAAiBD,EAAavC,EAAe4B,IAAU,CACnE,GAA+B,MAA3B5B,EAAe4B,IACW,EAAtBf,OAAO0B,GAAkB,CACzBV,GAAU,EACVD,GAAU,EACJS,EAAoB,SAAS7B,KAAKR,EAAe+B,MAAM,EAAGH,IAC1DI,EAAWtE,OACXkE,EACN9D,KAAKgD,OAAOwB,IAAID,EAAYvE,KAAKtC,OAAOkC,QAAU,GAClDH,IACA,SAGR,GAAmC,MAA/ByC,EAAe4B,EAAS,IAC+B,GAAnDf,OAAOM,EAAWY,MAAMH,EAAS,EAAGA,EAAS,IAC7C,SAGR,GAA+B,MAA3B5B,EAAe4B,IACW,EAAtBf,OAAO0B,GAAkB,CACzBV,GAAU,EACVD,GAAU,EACJS,EAAoB,SAAS7B,KAAKR,EAAe+B,MAAM,EAAGH,IAC1DI,EAAWtE,OACXkE,EACN9D,KAAKgD,OAAOwB,IAAID,EAAYvE,KAAKtC,OAAOkC,QAAU,GAClDH,IACA,SAGR,GAAmC,MAA/ByC,EAAe4B,EAAS,IAC+B,GAAnDf,OAAOM,EAAWY,MAAMH,EAAS,EAAGA,EAAS,IAC7C,SAGRC,GAAUU,EACVX,SACG,IAAoE,IAAhE9D,KAAKkD,sBAAsByB,QAAQzC,EAAe4B,IAAiB,CAC1EC,GAAU7B,EAAe4B,GACzBA,IACMS,EAAoB,SAAS7B,KAAKR,EAAe+B,MAAM,EAAGH,IAC1DI,EAAWtE,OACXkE,EACN9D,KAAKgD,OAAOwB,IAAID,EAAYvE,KAAKtC,OAAOkC,QAAU,GAClDH,SAC0D,EAAnDO,KAAKkD,sBAAsByB,QAAQF,IACvCzE,KAAKmD,sBAAsBjB,EAAe4B,KAC1C9D,KAAKmD,sBAAsBjB,EAAe4B,IAASxF,UACtDwF,IACArE,KAC4C,MAApCO,KAAKkC,eAAe4B,EAAS,IACjC9D,KAAK4E,iBAAiB5E,KAAKkC,eAAe4B,EAAS,KACnD9D,KAAK4E,iBAAiBH,KAAiBzE,KAAKkC,eAAe4B,EAAS,IAAOE,IAC/EF,GAAU,EACVC,GAAUU,GAIlBV,EAAOnE,OAAS,IAAMsC,EAAetC,SACiD,IAAnFI,KAAKkD,sBAAsByB,QAAQzC,EAAeA,EAAetC,OAAS,MAC7EmE,GAAU7B,EAAeA,EAAetC,OAAS,IAOrD,QAHIiF,EAAgB,EAChBC,EAAsBnB,EAAW,EAE9B3D,KAAKgD,OAAO+B,IAAID,IACnBD,IACAC,IAGJlB,EAAG5D,KAAKgD,OAAO+B,IAAIpB,GAAYkB,EAAQ,OACnCrC,EAAc,GAAGxC,KAAKtC,OAASqG,EAKnC,OAJAvB,EAAMxC,KAAKvC,MAAQ,GAAGuC,KAAKtC,OAASqG,EAAS/D,KAAKvC,MAAU,GAAGuC,KAAKtC,OAASqG,EACvD,IAAlBA,EAAOnE,SACP4C,EAAM,GAAGxC,KAAKtC,OAASqG,GAEpBvB,GAEJR,EAAAnC,UAAA+E,iBAAP,SAAwBH,GAGpB,OAFmCzE,KAAKkD,sBACnC8B,KAAK,SAACC,GAAgB,OAAAA,IAAQR,KAI/BzC,EAAAnC,UAAA6E,iBAAR,SAAyBD,EAAqBS,GAI1C,OAHAlF,KAAKmD,sBAAwBnD,KAAKyD,cAC5BzD,KAAKyD,cACLzD,KAAKmD,sBACJnD,KAAKmD,sBAAsB+B,IAC3BlF,KAAKmD,sBAAsB+B,GAAY/G,SACvC6B,KAAKmD,sBAAsB+B,GAAY/G,QAAQuE,KAAK+B,wBAxQlEU,EAAAA,kFAiBQC,EAAAA,OAAMC,KAAA,CAACjI,QAiShB4E,mBCtSE,SAAAsD,EAE4BC,EACAtD,EAClBuD,EACAC,GALV,IAAAC,EAOEC,EAAA7F,KAAAE,KAAMiC,IAAQjC,YALY0F,EAAAH,SAAAA,EACAG,EAAAzD,QAAAA,EAClByD,EAAAF,YAAAA,EACAE,EAAAD,UAAAA,EAbHC,EAAAxD,eAAyB,GACzBwD,EAAAE,eAAyB,EACzBF,EAAA7H,eAAyB,EACzB6H,EAAAG,YAAsB,GAGtBH,EAAAI,SAAW,SAACvF,KACZmF,EAAAK,QAAU,aASfL,EAAKM,aAAeN,EAAKF,YAAYS,gBAoHzC,OFpHA,SAAgBC,EAAUzH,EAAGM,GAEzB,SAASoH,IAAOnG,KAAKoG,YAAc3H,EADnCK,EAAcL,EAAGM,GAEjBN,EAAEoB,UAAkB,OAANd,EAAaC,OAAOqH,OAAOtH,IAAMoH,EAAGtG,UAAYd,EAAEc,UAAW,IAAIsG,GEpBlDG,CAAAA,EAAAA,GAoBxBhB,EAAAzF,UAAA6D,UAAP,SACEL,EACAnB,EACAyB,EACAC,GAIA,QALA,IAAAD,IAAAA,EAAA,QACA,IAAAC,IAAAA,EAAA,cAGA5D,KAAK6F,YAAc7F,KAAKnC,cAAgBmC,KAAKuG,kBAAoB,IAC5DlD,GAAcrD,KAAKnC,cACtB,OAAOmC,KAAKtC,OAASsC,KAAK6F,gBAEtB9B,EAAkB4B,EAAA9F,UAAM6D,UAAS5D,KAAAE,KACrCqD,EACAnB,EACAyB,EACAC,GAEFzE,MAAMqH,QAAQxG,KAAKlC,uBACfkC,KAAK8F,SAAS9F,KAAKyG,YAAYzG,KAAK0G,aAAa1G,KAAK2G,cAAc5C,IAAU/D,KAAKlC,yBACpD,IAA/BkC,KAAKlC,sBACLkC,KAAK8F,SACL9F,KAAK4F,cACD7C,OAAO/C,KAAKyG,YAAYzG,KAAK0G,aAAa1G,KAAK2G,cAAc5C,IAAU/D,KAAKkD,wBAC5ElD,KAAKyG,YAAYzG,KAAK0G,aAAa1G,KAAK2G,cAAc5C,IAAU/D,KAAKkD,wBAEzElD,KAAK8F,SAAS9F,KAAK0G,aAAa1G,KAAK2G,cAAc5C,KAEvD,IAAK/D,KAAKnC,cACR,OAAOkG,MAEH6C,EAAiB7C,EAAOnE,OAG9B,OAAOmE,GAFmB/D,KAAKtC,OAASsC,KAAK6F,aACnB5B,MAAM2C,IAI3BtB,EAAAzF,UAAAgH,kBAAP,SACElD,EACAC,QADA,IAAAD,IAAAA,EAAA,QACA,IAAAC,IAAAA,EAAA,kBAEMkD,EAA+B9G,KAAK0D,UACxC1D,KAAKgG,aAAazE,MAClBvB,KAAKkC,eACLyB,EACAC,GAEF5D,KAAKgG,aAAazE,MAAQuF,EACtB9G,KAAKgG,eAAiBhG,KAAKuF,SAASwB,eAGxC/G,KAAKgH,qBAGA1B,EAAAzF,UAAA0G,gBAAP,WACE,GAAIvG,KAAKnC,eAAmBmC,KAAKjC,oBAAqB,CACpD,GAAIiC,KAAKkC,eAAetC,SAAWI,KAAKjC,oBAAoB6B,OAC1D,MAAM,IAAIqH,MAAM,sDAEhB,OAAOjH,KAAKjC,oBAET,OAAIiC,KAAKnC,cACPmC,KAAKkC,eAAeS,QAAQ,MAAO,KAErC,IAGF2C,EAAAzF,UAAAmH,kBAAP,YAE6B,IAAzBhH,KAAKrC,iBACLqC,KAAKkC,eAAetC,SAAWI,KAAKgG,aAAazE,MAAM3B,SAEvDI,KAAKkH,oBAAsB,CAAC,QAAS,IACrClH,KAAK0D,UAAU1D,KAAKgG,aAAazE,MAAOvB,KAAKkC,kBAIjDlD,OAAAmI,eAAW7B,EAAAzF,UAAA,sBAAmB,KAA9B,SAA+B0D,OAAA6D,EAAAzF,EAAA4B,EAAA,GAAC8D,EAAAD,EAAA,GAAM7F,EAAA6F,EAAA,GACpCpH,KAAKyF,UAAU6B,YAAYtH,KAAKgG,aAAcqB,EAAM9F,oCAG9C+D,EAAAzF,UAAA4G,YAAR,SACElF,EACAgG,GAEA,OAAOhG,EACHA,EAAMoB,QAAQ3C,KAAKwH,iBAAiBD,GAA6B,IACjEhG,GAGE+D,EAAAzF,UAAA8G,cAAR,SAAsBpF,GACpB,OAAKvB,KAAKtC,QAGH6D,EACHA,EAAMoB,QAAQ3C,KAAKtC,OAAQ,IAHtB6D,GAOH+D,EAAAzF,UAAA6G,aAAR,SAAqBnF,GACnB,OAAKvB,KAAKvC,OAGH8D,EACHA,EAAMoB,QAAQ3C,KAAKvC,MAAO,IAHrB8D,GAOH+D,EAAAzF,UAAA2H,iBAAR,SAAyBD,GACvB,OAAO,IAAInJ,OACTmJ,EAA2BE,IAAI,SAACC,GAAiB,MAAA,KAAKA,IAAQC,KAAK,KACnE,2BAnILxC,EAAAA,kFAYIC,EAAAA,OAAMC,KAAA,CAACuC,EAAAA,+CACPxC,EAAAA,OAAMC,KAAA,CAACjI,YAlBHyK,EAAAA,kBAAgCC,EAAAA,aA2IzCxC,GArIiCtD,gBC2B/B,SAAA+F,EAE4BxC,EAClByC,GADkBhI,KAAAuF,SAAAA,EAClBvF,KAAAgI,aAAAA,EAVFhI,KAAAiI,UAA2B,KAK5BjI,KAAA8F,SAAW,SAACvF,KACZP,KAAA+F,QAAU,aAyOnB,OAjOE/G,OAAAmI,eACWY,EAAAlI,UAAA,iBAAc,KADzB,SAC0B0B,GACxBvB,KAAKkI,WAAa3G,GAAS,GACtBvB,KAAKkI,aAGVlI,KAAKgI,aAAa9F,eAAiBlC,KAAKmI,sBAAsBnI,KAAKkI,YACnElI,KAAKgI,aAAad,oBAAsB,CACtC,QACAlH,KAAKgI,aAAatE,UAChB1D,KAAKoI,YACLpI,KAAKgI,aAAa9F,mDAKxBlD,OAAAmI,eACWY,EAAAlI,UAAA,oBAAiB,KAD5B,SAC6B0B,GAExBA,GACApC,MAAMqH,QAAQjF,MACdpC,MAAMqH,QAAQjF,IAAWA,EAAM3B,UAIlCI,KAAKgI,aAAa9E,sBAAwB3B,oCAG5CvC,OAAAmI,eACWY,EAAAlI,UAAA,WAAQ,KADnB,SACoB0B,GACbA,IAGLvB,KAAKgI,aAAa7E,sBAAwB5B,oCAG5CvC,OAAAmI,eACWY,EAAAlI,UAAA,SAAM,KADjB,SACkB0B,GACXA,IAGLvB,KAAKgI,aAAatK,OAAS6D,oCAG7BvC,OAAAmI,eACWY,EAAAlI,UAAA,QAAK,KADhB,SACiB0B,GACVA,IAGLvB,KAAKgI,aAAavK,MAAQ8D,oCAG5BvC,OAAAmI,eACWY,EAAAlI,UAAA,wBAAqB,KADhC,SACiC0B,GAC/BvB,KAAKgI,aAAalK,sBAAwByD,mCAG5CvC,OAAAmI,eACWY,EAAAlI,UAAA,gBAAa,KADxB,SACyB0B,GAClBA,IAGLvB,KAAKgI,aAAanK,cAAgB0D,oCAGpCvC,OAAAmI,eACWY,EAAAlI,UAAA,sBAAmB,KAD9B,SAC+B0B,GACxBA,IAGLvB,KAAKgI,aAAajK,oBAAsBwD,oCAG1CvC,OAAAmI,eACWY,EAAAlI,UAAA,eAAY,KADvB,SACwB0B,GACtBvB,KAAKgI,aAAapK,aAAe2D,mCAGnCvC,OAAAmI,eACWY,EAAAlI,UAAA,kBAAe,KAD1B,SAC2B0B,GACzBvB,KAAKgI,aAAarK,gBAAkB4D,mCAI/BwG,EAAAlI,UAAAwI,QADP,SACe3G,OACP4G,EAAuB5G,EAAQ,OAErC,GADA1B,KAAKoI,YAAcE,EAAG/G,MACjBvB,KAAKkI,WAAV,KAIMvE,EAAqD,IAAjC2E,EAAiB,eACtCA,EAAiB,eAActI,KAAKgI,aAAatK,OAAOkC,OACzD0I,EAAiB,eACjBC,EAAqB,EACzBvI,KAAKgI,aAAanB,kBAChBlD,EACA,SAACkB,GAAkB,OAAC0D,EAAa1D,IAG/B7E,KAAKuF,SAASwB,gBAAkBuB,IAGpCA,EAAGE,eAAiBF,EAAGG,aACF,OAAnBzI,KAAKiI,UACDjI,KAAKiI,UACLtE,GAEwB,0BAAzB,EAAW+E,UAAwC,EAAIH,GAC5DvI,KAAKiI,UAAY,WArBfjI,KAAK8F,SAASwC,EAAG/G,QAyBdwG,EAAAlI,UAAA8I,OADP,WAEE3I,KAAKgI,aAAahB,oBAClBhH,KAAK+F,WAIAgC,EAAAlI,UAAA+I,QADP,SACelH,OACP4G,EAAuB5G,EAAQ,OAE5B,OAAP4G,GAAqC,OAAtBA,EAAGE,gBAClBF,EAAGE,iBAAmBF,EAAGG,cACzBH,EAAGE,eAAiBxI,KAAKgI,aAAatK,OAAOkC,QAEtB,KAAvB,EAAWiJ,UAIT7I,KAAKgI,aAAanK,gBACpBmC,KAAKgI,aAAanC,YAAc7F,KAAKgI,aAAazB,mBAEpD+B,EAAG/G,MAAS+G,EAAG/G,OAAS+G,EAAG/G,QAAUvB,KAAKgI,aAAatK,OAEnD4K,EAAG/G,MADHvB,KAAKgI,aAAatK,OAASsC,KAAKgI,aAAanC,aAG3CyC,EAAiB,gBAAgBA,EAAe,eAAgBtI,KAAKgI,aAAatK,OAAOkC,SAC7F0I,EAAGE,eAAiBxI,KAAKgI,aAAatK,OAAOkC,UAM1CmI,EAAAlI,UAAAiJ,EADP,SACSpH,OACD4G,EAAuB5G,EAAQ,OACnB,KAAdA,EAAEmH,SACJnH,EAAEqH,iBAEc,KAAdrH,EAAEmH,SAAgC,IAAdnH,EAAEmH,UACnBP,EAAiB,gBAAetI,KAAKgI,aAAatK,OAAOkC,QACxD0I,EAAe,cAAetI,KAAKgI,aAAatK,OAAOkC,QAC3D8B,EAAEqH,iBAEJ/I,KAAK4I,QAAQlH,GACK,IAAdA,EAAEmH,SACqB,IAAtBP,EAAGE,gBACHF,EAAGG,eAAiBH,EAAG/G,MAAM3B,SAChC0I,EAAG/G,MAAQvB,KAAKgI,aAAatK,OAC7BsC,KAAKiI,UAAYjI,KAAKgI,aAAatK,OAASsC,KAAKgI,aAAatK,OAAOkC,OAAS,EAC9EI,KAAKqI,QAAQ3G,MAMZqG,EAAAlI,UAAAmJ,QADP,WAEEhJ,KAAKiI,UAAYlF,OAAOkG,kBAIblB,EAAAlI,UAAAqJ,WAAb,SAAwB7F,UH3K1B,SAyBgB8F,EAAUjJ,EAASkJ,EAAYC,EAAGC,GAC9C,OAAO,IAAKD,IAAMA,EAAIE,UAAU,SAAUC,EAASC,GAC/C,SAASC,EAAUnI,GAAS,IAAMJ,EAAKmI,EAAU1I,KAAKW,IAAW,MAAOG,GAAK+H,EAAO/H,IACpF,SAASiI,EAASpI,GAAS,IAAMJ,EAAKmI,EAAiB,SAAE/H,IAAW,MAAOG,GAAK+H,EAAO/H,IACvF,SAASP,EAAK4C,GAAUA,EAAOzC,KAAOkI,EAAQzF,EAAOxC,OAAS,IAAI8H,EAAE,SAAUG,GAAWA,EAAQzF,EAAOxC,SAAWqI,KAAKF,EAAWC,GACnIxI,GAAMmI,EAAYA,EAAUvJ,MAAMG,EAASkJ,GAAc,KAAKxI,0EG8I9DyC,IAAeQ,YACjBR,EAAa,IAEW,iBAAfA,IACTA,EAAawG,OAAOxG,GACpBrD,KAAKgI,aAAapC,eAAgB,GAEpCvC,GAAcrD,KAAKgI,aAAa9F,gBAC9BlC,KAAKgI,aAAa9F,iBAAmBlC,KAAKgI,aAAatK,QAAUsC,KAAKgI,aAAanK,eAChFmC,KAAKgI,aAAad,oBAAsB,CACzC,QACAlH,KAAKgI,aAAatE,UAChBL,EACArD,KAAKgI,aAAa9F,iBAGnBlC,KAAKgI,aAAad,oBAAsB,CAAC,QAAS7D,GACvDrD,KAAKoI,YAAc/E,WAId0E,EAAAlI,UAAAiK,iBAAP,SAAwBC,GACtB/J,KAAK8F,SAAWiE,EAChB/J,KAAKgI,aAAalC,SAAW9F,KAAK8F,UAI7BiC,EAAAlI,UAAAmK,kBAAP,SAAyBD,GACvB/J,KAAK+F,QAAUgE,GAIVhC,EAAAlI,UAAAoK,iBAAP,SAAwBC,GACtBlK,KAAKgI,aAAad,oBAAsB,CAAC,WAAYgD,IAE/CnC,EAAAlI,UAAAsI,sBAAR,SAA8BgC,GAA9B,IAAAzE,EAAA1F,KACE,OAAOmK,EAAQ/F,MAAM,aAChB+F,EAAQ7H,MAAM,IACd8H,OAAO,SAACC,EAAeC,EAAiBC,GAGvC,GAFA7E,EAAK8E,OAAsB,MAAZF,EAAmBC,EAAQ7E,EAAK8E,OAE/B,MAAZF,EACF,OAAO5E,EAAKsC,aAAapD,iBAAiB0F,GAAWD,EAAQC,EAAUD,EAEzE3E,EAAK+E,KAAOF,MACNG,EAAuB3H,OAAOoH,EACjClG,MAAMyB,EAAK8E,OAAS,EAAG9E,EAAK+E,OAG/B,OAAOJ,EAFoB,IAAIlL,MAAMuL,EAAe,GACjD/C,KAAKwC,EAAQzE,EAAK8E,OAAS,KAE7B,KAAOL,uBA1PjBQ,EAAAA,UAAStF,KAAA,CAAC,CACTuF,SAAU,SACVC,UAAW,CACT,CACEC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,OAAAlD,IAC9B/D,OAAO,GAETsB,4EAeCF,EAAAA,OAAMC,KAAA,CAACuC,EAAAA,mBA1BHtC,6CA+BN4F,EAAAA,MAAK7F,KAAA,CAAC,mCAgBN6F,EAAAA,wBAYAA,EAAAA,sBAQAA,EAAAA,qBAQAA,EAAAA,qCAQAA,EAAAA,6BAKAA,EAAAA,mCAQAA,EAAAA,4BAQAA,EAAAA,+BAKAA,EAAAA,uBAKAC,EAAAA,aAAY9F,KAAA,CAAC,QAAS,CAAC,2BA6BvB8F,EAAAA,aAAY9F,KAAA,CAAC,yBAMb8F,EAAAA,aAAY9F,KAAA,CAAC,QAAS,CAAC,sBAyBvB8F,EAAAA,aAAY9F,KAAA,CAAC,UAAW,CAAC,4BAsBzB8F,EAAAA,aAAY9F,KAAA,CAAC,YA4DhB0C,KCzQAqD,EAAA,WAUE,SAAAA,EAA2BpD,GAAAhI,KAAAgI,aAAAA,EAW7B,OATSoD,EAAAvL,UAAAwL,UAAP,SAAiB9J,EAAsBiC,GACrC,OAAKjC,EAGe,iBAATiC,EACFxD,KAAKgI,aAAatE,UAAU,GAAGnC,EAASiC,GAE1CxD,KAAKgI,aAAa5E,qBAAqB,GAAG7B,EAASiC,GALjD,wBAVZ8H,EAAAA,KAAIjG,KAAA,CAAC,CACJgC,KAAM,OACNkE,MAAM,+CALCvJ,KAoBToJ,EArBA,gBCOA,SAAAI,KAgCA,OAzBgBA,EAAAC,QAAd,SAAsBC,GACpB,MAAO,CACLC,SAAUH,EACVX,UAAW,CACT,CACEC,QAASxN,EACTsO,SAAUF,GAEZ,CACEZ,QAASvN,EACTqO,SAAUpO,GAEZ,CACEsN,QAAS1N,EACTyO,WAAYC,EACZC,KAAM,CAACxO,EAAgBD,OAKjBkO,EAAAQ,SAAd,SAAuBN,GACrB,MAAO,CACLC,SAAUH,wBA7BfS,EAAAA,SAAQ5G,KAAA,CAAC,CACRwF,UAAW,CAAC7I,GACZkK,QAAS,CAACnE,EAAeqD,GACzBe,aAAc,CAACpE,EAAeqD,OA6BhCI,KAKA,SAAgBM,EACfM,EAA2BV,GAC1B,MAA+B,mBAAhBA,EAA8BA,IAAapM,EAAA,GAAQ8M,EAAeV","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport interface IConfig {\n    sufix: string;\n    prefix: string;\n    clearIfNotMatch: boolean;\n    showTemplate: boolean;\n    showMaskTyped: boolean;\n    shownMaskExpression: string;\n    dropSpecialCharacters: boolean | string[];\n    specialCharacters: string[];\n    patterns: {\n        [character: string]: {\n            pattern: RegExp,\n            optional?: boolean\n        }\n    };\n}\n\nexport type optionsConfig = Partial<IConfig>;\nexport const config: InjectionToken<string> = new InjectionToken('config');\nexport const NEW_CONFIG: InjectionToken<string> = new InjectionToken('NEW_CONFIG');\nexport const INITIAL_CONFIG: InjectionToken<IConfig> = new InjectionToken('INITIAL_CONFIG');\n\nexport const initialConfig: IConfig = {\n    sufix: '',\n    prefix: '',\n    clearIfNotMatch: false,\n    showTemplate: false,\n    showMaskTyped: false,\n    dropSpecialCharacters: true,\n    shownMaskExpression: '',\n    specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\\\"', '\\''],\n    patterns: {\n        '0': {\n            pattern: new RegExp('\\\\d'),\n        },\n        '9': {\n            pattern: new RegExp('\\\\d'),\n            optional: true\n        },\n        'A': {\n            pattern: new RegExp('\\[a-zA-Z0-9\\]')\n        },\n        'S': {\n            pattern: new RegExp('\\[a-zA-Z\\]')\n        },\n        'd': {\n            pattern: new RegExp('\\\\d'),\n        },\n        'm': {\n            pattern: new RegExp('\\\\d'),\n        },\n        'H': {\n            pattern: new RegExp('\\\\d'),\n        },\n        'h': {\n            pattern: new RegExp('\\\\d'),\n        },\n        's': {\n            pattern: new RegExp('\\\\d'),\n        }\n    }\n};\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\nimport { config, IConfig } from './config';\n\n@Injectable()\nexport class MaskApplierService {\n\n    public dropSpecialCharacters: IConfig['dropSpecialCharacters'];\n    public showTemplate: IConfig['showTemplate'];\n    public clearIfNotMatch: IConfig['clearIfNotMatch'];\n    public maskExpression: string = '';\n    public shownMaskExpression: string = '';\n    public maskSpecialCharacters: IConfig['specialCharacters'];\n    public maskAvailablePatterns: IConfig['patterns'];\n    public prefix: IConfig['prefix'];\n    public sufix: IConfig['sufix'];\n    public customPattern: IConfig['patterns'];\n\n    private _shift: Set<number>;\n\n    public constructor(\n        @Inject(config) protected _config: IConfig\n    ) {\n        this._shift = new Set();\n        this.maskSpecialCharacters = this._config!.specialCharacters;\n        this.maskAvailablePatterns = this._config.patterns;\n        this.clearIfNotMatch = this._config.clearIfNotMatch;\n        this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n        this.maskSpecialCharacters = this._config!.specialCharacters;\n        this.maskAvailablePatterns = this._config.patterns;\n        this.prefix = this._config.prefix;\n        this.sufix = this._config.sufix;\n\n\n    }\n    // tslint:disable-next-line:no-any\n    public applyMaskWithPattern(inputValue: string, maskAndPattern: [string, IConfig['patterns']]): string {\n        const [mask, customPattern] = maskAndPattern;\n        this.customPattern = customPattern;\n        return this.applyMask(inputValue, mask);\n    }\n    public applyMask(\n        inputValue: string,\n        maskExpression: string,\n        position: number = 0,\n        cb: Function = () => { }\n    ): string {\n        if (inputValue === undefined || inputValue === null || maskExpression === undefined) {\n            return '';\n        }\n        let cursor: number = 0;\n        let result: string = ``;\n        let multi: boolean = false;\n\n        if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n            inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n        }\n\n        const inputArray: string[] = inputValue.toString()\n            .split('');\n        if (maskExpression === 'percent') {\n            if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/]/)) {\n                inputValue = inputValue.substring(0, inputValue.length - 1);\n            }\n            if (this.percentage(inputValue)) {\n                result = inputValue;\n            } else {\n                result = inputValue.substring(0, inputValue.length - 1);\n            }\n        } else if (maskExpression === 'separator') {\n            if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[!$%^&*()_+|~=`{}\\[\\]:\";'<>?\\/]/)) {\n                inputValue = inputValue.substring(0, inputValue.length - 1);\n            }\n            const strForSep: string = inputValue.replace(/\\s/g, '');\n            result = this.separator(strForSep);\n            position = result.length + 1;\n            cursor = position;\n            const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\n                ? inputArray.length\n                : cursor;\n            this._shift.add(shiftStep + this.prefix.length || 0);\n        } else if (maskExpression === 'dot_separator') {\n            if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[!$%^&*()_+|~=`{}\\[\\]:\";'<>?\\/]/)) {\n                inputValue = inputValue.substring(0, inputValue.length - 1);\n            }\n            const strForSep: string = inputValue.replace(/\\./g, '');\n            result = this.dotSeparator(strForSep);\n            position = result.length + 1;\n            cursor = position;\n            const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\n                ? inputArray.length\n                : cursor;\n            this._shift.add(shiftStep + this.prefix.length || 0);\n        } else if (maskExpression === 'coma_separator') {\n            if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[!$%^&*()_+|~=`{}\\[\\]:\";'<>?\\/]/)) {\n                inputValue = inputValue.substring(0, inputValue.length - 1);\n            }\n            const strForSep: string = inputValue.replace(/\\,/g, '');\n            result = this.comaSeparator(strForSep);\n            position = result.length + 1;\n            cursor = position;\n            const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\n                ? inputArray.length\n                : cursor;\n            this._shift.add(shiftStep + this.prefix.length || 0);\n        } else {\n            // tslint:disable-next-line\n            for (let i: number = 0, inputSymbol: string = inputArray[0]; i\n                < inputArray.length; i++ , inputSymbol = inputArray[i]) {\n                if (cursor === maskExpression.length) {\n                    break;\n                }\n                if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '?') {\n                    result += inputSymbol;\n                    cursor += 2;\n                } else if (\n                    maskExpression[cursor + 1] === '*' && multi\n                    && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])\n                ) {\n                    result += inputSymbol;\n                    cursor += 3;\n                    multi = false;\n                } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])\n                    && maskExpression[cursor + 1]\n                    === '*') {\n                    result += inputSymbol;\n                    multi = true;\n                } else if (maskExpression[cursor + 1] === '?' && this._checkSymbolMask(\n                    inputSymbol,\n                    maskExpression[cursor + 2]\n                )) {\n                    result += inputSymbol;\n                    cursor += 3;\n                } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])) {\n                    if (maskExpression[cursor] === 'H') {\n                        if (Number(inputSymbol) > 2) {\n                            result += 0;\n                            cursor += 1;\n                            const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    } if (maskExpression[cursor] === 'h') {\n                        if (result === '2' && Number(inputSymbol) > 3) {\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'm') {\n                        if (Number(inputSymbol) > 5) {\n                            result += 0;\n                            cursor += 1;\n                            const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 's') {\n                        if (Number(inputSymbol) > 5) {\n                            result += 0;\n                            cursor += 1;\n                            const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    result += inputSymbol;\n                    cursor++;\n                } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])) {\n                    if (maskExpression[cursor] === 'd') {\n                        if (Number(inputSymbol) > 3) {\n                            result += 0;\n                            cursor += 1;\n                            const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor - 1] === 'd') {\n                        if (Number(inputValue.slice(cursor - 1, cursor + 1)) > 31) {\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'm') {\n                        if (Number(inputSymbol) > 1) {\n                            result += 0;\n                            cursor += 1;\n                            const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor - 1] === 'm') {\n                        if (Number(inputValue.slice(cursor - 1, cursor + 1)) > 12) {\n                            continue;\n                        }\n                    }\n                    result += inputSymbol;\n                    cursor++;\n                } else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\n                    result += maskExpression[cursor];\n                    cursor++;\n                    const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\n                        ? inputArray.length\n                        : cursor;\n                    this._shift.add(shiftStep + this.prefix.length || 0);\n                    i--;\n                } else if (this.maskSpecialCharacters.indexOf(inputSymbol) > -1\n                    && this.maskAvailablePatterns[maskExpression[cursor]]\n                    && this.maskAvailablePatterns[maskExpression[cursor]].optional) {\n                    cursor++;\n                    i--;\n                } else if ((this.maskExpression[cursor + 1] === '*')\n                    && (this._findSpecialChar(this.maskExpression[cursor + 2]))\n                    && (this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2]) && multi) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n            }\n        }\n        if (result.length + 1 === maskExpression.length\n            && this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1) {\n            result += maskExpression[maskExpression.length - 1];\n        }\n\n\n        let shift: number = 1;\n        let newPosition: number = position + 1;\n\n        while (this._shift.has(newPosition)) {\n            shift++;\n            newPosition++;\n        }\n\n        cb(this._shift.has(position) ? shift : 0);\n        let res: string = `${this.prefix}${result}`;\n        res = this.sufix ? `${this.prefix}${result}${this.sufix}` : `${this.prefix}${result}`;\n        if (result.length === 0) {\n            res = `${this.prefix}${result}`;\n        }\n        return res;\n    }\n    public _findSpecialChar(inputSymbol: string): undefined | string {\n        const symbol: string | undefined = this.maskSpecialCharacters\n            .find((val: string) => val === inputSymbol);\n        return symbol;\n    }\n\n    private _checkSymbolMask(inputSymbol: string, maskSymbol: string): boolean {\n        this.maskAvailablePatterns = this.customPattern\n            ? this.customPattern\n            : this.maskAvailablePatterns;\n        return this.maskAvailablePatterns[maskSymbol]\n            && this.maskAvailablePatterns[maskSymbol].pattern\n            && this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol);\n    }\n\n    private separator = (str: string) => {\n        str += '';\n        const x: string[] = str.split('.');\n        const decimals: string = x.length > 1 ? `.${x[1]}` : '';\n        let res: string = x[0];\n        const rgx: RegExp = /(\\d+)(\\d{3})/;\n        while (rgx.test(res)) {\n            res = res.replace(rgx, '$1' + ' ' + '$2');\n        }\n        return res + decimals;\n    }\n\n    private dotSeparator = (str: string) => {\n        str += '';\n        const x: string[] = str.split(',');\n        const decimals: string = x.length > 1 ? `,${x[1]}` : '';\n        let res: string = x[0];\n        const rgx: RegExp = /(\\d+)(\\d{3})/;\n        while (rgx.test(res)) {\n            res = res.replace(rgx, '$1' + '.' + '$2');\n        }\n        return res + decimals;\n    }\n\n    private comaSeparator = (str: string) => {\n        str += '';\n        const x: string[] = str.split('.');\n        const decimals: string = x.length > 1 ? `.${x[1]}` : '';\n        let res: string = x[0];\n        const rgx: RegExp = /(\\d+)(\\d{3})/;\n        while (rgx.test(res)) {\n            res = res.replace(rgx, '$1' + ',' + '$2');\n        }\n        return res + decimals;\n    }\n\n    private percentage = (str: string): boolean => {\n        return Number(str) >= 0 && Number(str) <= 100;\n    }\n}\n","import { ElementRef, Inject, Injectable, Renderer2 } from '@angular/core';\nimport { config, IConfig } from './config';\nimport { DOCUMENT } from '@angular/common';\nimport { MaskApplierService } from './mask-applier.service';\n\n@Injectable()\nexport class MaskService extends MaskApplierService {\n  public maskExpression: string = '';\n  public isNumberValue: boolean = false;\n  public showMaskTyped: boolean = false;\n  public maskIsShown: string = '';\n  private _formElement: HTMLInputElement;\n  // tslint:disable-next-line\n  public onChange = (_: any) => {};\n  public onTouch = () => {};\n  public constructor(\n    // tslint:disable-next-line\n    @Inject(DOCUMENT) private document: any,\n    @Inject(config) protected _config: IConfig,\n    private _elementRef: ElementRef,\n    private _renderer: Renderer2\n  ) {\n    super(_config);\n    this._formElement = this._elementRef.nativeElement;\n  }\n\n  public applyMask(\n    inputValue: string,\n    maskExpression: string,\n    position: number = 0,\n    cb: Function = () => {}\n  ): string  {\n\n    this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';\n    if (!inputValue && this.showMaskTyped) {\n      return this.prefix + this.maskIsShown;\n    }\n    const result: string  = super.applyMask(\n      inputValue,\n      maskExpression,\n      position,\n      cb\n    );\n    Array.isArray(this.dropSpecialCharacters)\n      ? this.onChange(this._removeMask(this._removeSufix(this._removePrefix(result)), this.dropSpecialCharacters))\n      : this.dropSpecialCharacters === true\n      ? this.onChange(\n        this.isNumberValue\n          ? Number(this._removeMask(this._removeSufix(this._removePrefix(result)), this.maskSpecialCharacters))\n          : this._removeMask(this._removeSufix(this._removePrefix(result)), this.maskSpecialCharacters)\n      )\n      : this.onChange(this._removeSufix(this._removePrefix(result)));\n    let ifMaskIsShown: string = '';\n    if (!this.showMaskTyped) {\n      return result;\n    }\n    const resLen: number = result.length;\n    const prefNmask: string = this.prefix + this.maskIsShown;\n    ifMaskIsShown = prefNmask.slice(resLen);\n    return result + ifMaskIsShown;\n  }\n\n  public applyValueChanges(\n    position: number = 0,\n    cb: Function = () => {}\n  ): void {\n    const maskedInput: string | number = this.applyMask(\n      this._formElement.value,\n      this.maskExpression,\n      position,\n      cb\n    );\n    this._formElement.value = maskedInput;\n    if (this._formElement === this.document.activeElement) {\n      return;\n    }\n    this.clearIfNotMatchFn();\n  }\n\n  public showMaskInInput(): string {\n    if (this.showMaskTyped && !!this.shownMaskExpression) {\n      if (this.maskExpression.length !== this.shownMaskExpression.length) {\n        throw new Error('Mask expression must match mask placeholder length');\n      } else {\n        return this.shownMaskExpression;\n      }\n    } else if (this.showMaskTyped) {\n      return this.maskExpression.replace(/\\w/g, '_');\n    }\n    return '';\n  }\n\n  public clearIfNotMatchFn(): void {\n    if (\n      this.clearIfNotMatch === true &&\n      this.maskExpression.length !== this._formElement.value.length\n    ) {\n      this.formElementProperty = ['value', ''];\n      this.applyMask(this._formElement.value, this.maskExpression);\n    }\n  }\n\n  public set formElementProperty([name, value]: [string, string | boolean]) {\n    this._renderer.setProperty(this._formElement, name, value);\n  }\n\n  private _removeMask(\n    value: string,\n    specialCharactersForRemove: string[]\n  ): string {\n    return value\n      ? value.replace(this._regExpForRemove(specialCharactersForRemove), '')\n      : value;\n  }\n\n  private _removePrefix(value: string): string {\n    if (!this.prefix) {\n      return value;\n    }\n    return value\n      ? value.replace(this.prefix, '')\n      : value;\n  }\n\n  private _removeSufix(value: string): string {\n    if (!this.sufix) {\n      return value;\n    }\n    return value\n      ? value.replace(this.sufix, '')\n      : value;\n  }\n\n  private _regExpForRemove(specialCharactersForRemove: string[]): RegExp {\n    return new RegExp(\n      specialCharactersForRemove.map((item: string) => `\\\\${item}`).join('|'),\n      'gi'\n    );\n  }\n}\n","import {\n  Directive,\n  forwardRef,\n  HostListener,\n  Inject,\n  Input\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MaskService } from './mask.service';\nimport { IConfig } from './config';\n\n@Directive({\n  selector: '[mask]',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MaskDirective),\n      multi: true\n    },\n    MaskService\n  ]\n})\nexport class MaskDirective implements ControlValueAccessor {\n  private _maskValue: string;\n  private _inputValue: string;\n  private _position: number | null = null;\n  // tslint:disable-next-line\n  private _start: number;\n  private _end: number;\n  // tslint:disable-next-line\n  public onChange = (_: any) => { };\n  public onTouch = () => { };\n  public constructor(\n    // tslint:disable-next-line\n    @Inject(DOCUMENT) private document: any,\n    private _maskService: MaskService\n  ) { }\n\n\n  @Input('mask')\n  public set maskExpression(value: string) {\n    this._maskValue = value || '';\n    if (!this._maskValue) {\n      return;\n    }\n    this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue);\n    this._maskService.formElementProperty = [\n      'value',\n      this._maskService.applyMask(\n        this._inputValue,\n        this._maskService.maskExpression\n      )\n    ];\n  }\n\n  @Input()\n  public set specialCharacters(value: IConfig['specialCharacters']) {\n    if (\n      !value ||\n      !Array.isArray(value) ||\n      (Array.isArray(value) && !value.length)\n    ) {\n      return;\n    }\n    this._maskService.maskSpecialCharacters = value;\n  }\n\n  @Input()\n  public set patterns(value: IConfig['patterns']) {\n    if (!value) {\n      return;\n    }\n    this._maskService.maskAvailablePatterns = value;\n  }\n\n  @Input()\n  public set prefix(value: IConfig['prefix']) {\n    if (!value) {\n      return;\n    }\n    this._maskService.prefix = value;\n  }\n\n  @Input()\n  public set sufix(value: IConfig['sufix']) {\n    if (!value) {\n      return;\n    }\n    this._maskService.sufix = value;\n  }\n\n  @Input()\n  public set dropSpecialCharacters(value: IConfig['dropSpecialCharacters']) {\n    this._maskService.dropSpecialCharacters = value;\n  }\n\n  @Input()\n  public set showMaskTyped(value: IConfig['showMaskTyped']) {\n    if (!value) {\n      return;\n    }\n    this._maskService.showMaskTyped = value;\n  }\n\n  @Input()\n  public set shownMaskExpression(value: IConfig['shownMaskExpression']) {\n    if (!value) {\n      return;\n    }\n    this._maskService.shownMaskExpression = value;\n  }\n\n  @Input()\n  public set showTemplate(value: IConfig['showTemplate']) {\n    this._maskService.showTemplate = value;\n  }\n\n  @Input()\n  public set clearIfNotMatch(value: IConfig['clearIfNotMatch']) {\n    this._maskService.clearIfNotMatch = value;\n  }\n\n  @HostListener('input', ['$event'])\n  public onInput(e: KeyboardEvent): void {\n    const el: HTMLInputElement = e.target as HTMLInputElement;\n    this._inputValue = el.value;\n    if (!this._maskValue) {\n      this.onChange(el.value);\n      return;\n    }\n    const position: number = (el.selectionStart as number) === 1\n      ? (el.selectionStart as number) + this._maskService.prefix.length\n      : el.selectionStart as number;\n    let caretShift: number = 0;\n    this._maskService.applyValueChanges(\n      position,\n      (shift: number) => (caretShift = shift)\n    );\n    // only set the selection if the element is active\n    if (this.document.activeElement !== el) {\n      return;\n    }\n    el.selectionStart = el.selectionEnd =\n      this._position !== null\n        ? this._position\n        : position +\n        // tslint:disable-next-line\n        ((e as any).inputType === 'deleteContentBackward' ? 0 : caretShift);\n    this._position = null;\n  }\n\n  @HostListener('blur')\n  public onBlur(): void {\n    this._maskService.clearIfNotMatchFn();\n    this.onTouch();\n  }\n\n  @HostListener('click', ['$event'])\n  public onFocus(e: MouseEvent | KeyboardEvent): void {\n    const el: HTMLInputElement = e.target as HTMLInputElement;\n    if (\n      el !== null && el.selectionStart !== null &&\n      el.selectionStart === el.selectionEnd &&\n      el.selectionStart > this._maskService.prefix.length &&\n      // tslint:disable-next-line\n      (e as any).keyCode !== 38\n    ) {\n      return;\n    }\n    if (this._maskService.showMaskTyped) {\n      this._maskService.maskIsShown = this._maskService.showMaskInInput();\n    }\n    el.value = !el.value || el.value === this._maskService.prefix\n      ? this._maskService.prefix + this._maskService.maskIsShown\n      : el.value;\n    /** fix of cursor position with prefix when mouse click occur */\n    if (((el.selectionStart as number) || (el.selectionEnd as number)) <= this._maskService.prefix.length) {\n      el.selectionStart = this._maskService.prefix.length;\n      return;\n    }\n  }\n\n  @HostListener('keydown', ['$event'])\n  public a(e: KeyboardEvent): void {\n    const el: HTMLInputElement = e.target as HTMLInputElement;\n    if (e.keyCode === 38) {\n      e.preventDefault();\n    }\n    if (e.keyCode === 37 || e.keyCode === 8) {\n      if ((el.selectionStart as number) <= this._maskService.prefix.length\n        && (el.selectionEnd as number) <= this._maskService.prefix.length) {\n        e.preventDefault();\n      }\n      this.onFocus(e);\n      if (e.keyCode === 8\n        && el.selectionStart === 0\n        && el.selectionEnd === el.value.length) {\n        el.value = this._maskService.prefix;\n        this._position = this._maskService.prefix ? this._maskService.prefix.length : 1;\n        this.onInput(e);\n      }\n    }\n  }\n\n  @HostListener('paste')\n  public onPaste(): void {\n    this._position = Number.MAX_SAFE_INTEGER;\n  }\n\n  /** It writes the value in the input */\n  public async writeValue(inputValue: string): Promise<void> {\n    if (inputValue === undefined) {\n      inputValue = '';\n    }\n    if (typeof inputValue === 'number') {\n      inputValue = String(inputValue);\n      this._maskService.isNumberValue = true;\n    }\n    inputValue && this._maskService.maskExpression ||\n      this._maskService.maskExpression && (this._maskService.prefix || this._maskService.showMaskTyped)\n      ? (this._maskService.formElementProperty = [\n        'value',\n        this._maskService.applyMask(\n          inputValue,\n          this._maskService.maskExpression\n        )\n      ])\n      : (this._maskService.formElementProperty = ['value', inputValue]);\n    this._inputValue = inputValue;\n  }\n\n  // tslint:disable-next-line\n  public registerOnChange(fn: any): void {\n    this.onChange = fn;\n    this._maskService.onChange = this.onChange;\n  }\n\n  // tslint:disable-next-line\n  public registerOnTouched(fn: any): void {\n    this.onTouch = fn;\n  }\n\n  /** It disables the input element */\n  public setDisabledState(isDisabled: boolean): void {\n    this._maskService.formElementProperty = ['disabled', isDisabled];\n  }\n  private _repeatPatternSymbols(maskExp: string): string {\n    return maskExp.match(/{[0-9]+}/)\n      && maskExp.split('')\n        .reduce((accum: string, currval: string, index: number): string => {\n          this._start = (currval === '{') ? index : this._start;\n\n          if (currval !== '}') {\n            return this._maskService._findSpecialChar(currval) ? accum + currval : accum;\n          }\n          this._end = index;\n          const repeatNumber: number = Number(maskExp\n            .slice(this._start + 1, this._end));\n          const repaceWith: string = new Array(repeatNumber + 1)\n            .join(maskExp[this._start - 1]);\n          return accum + repaceWith;\n        }, '') || maskExp;\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { MaskApplierService } from './mask-applier.service';\nimport { IConfig } from './config';\n\n@Pipe({\n  name: 'mask',\n  pure: true\n})\nexport class MaskPipe implements PipeTransform {\n\n  public constructor(private _maskService: MaskApplierService) { }\n\n  public transform(value: string|number, mask: string | [string, IConfig['patterns']]): string {\n    if (!value) {\n      return '';\n    }\n    if (typeof mask === 'string') {\n      return this._maskService.applyMask(`${value}`, mask);\n    }\n    return this._maskService.applyMaskWithPattern(`${value}`, mask);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { config, INITIAL_CONFIG, initialConfig, NEW_CONFIG, optionsConfig } from './config';\nimport { MaskApplierService } from './mask-applier.service';\nimport { MaskDirective } from './mask.directive';\nimport { MaskPipe } from './mask.pipe';\n\n@NgModule({\n  providers: [MaskApplierService],\n  exports: [MaskDirective, MaskPipe],\n  declarations: [MaskDirective, MaskPipe]\n})\nexport class NgxMaskModule {\n\n  public static forRoot(configValue?: optionsConfig): ModuleWithProviders {\n    return {\n      ngModule: NgxMaskModule,\n      providers: [\n        {\n          provide: NEW_CONFIG,\n          useValue: configValue\n        },\n        {\n          provide: INITIAL_CONFIG,\n          useValue: initialConfig\n        },\n        {\n          provide: config,\n          useFactory: _configFactory,\n          deps: [INITIAL_CONFIG, NEW_CONFIG]\n        },\n      ]\n    };\n  }\n  public static forChild(configValue?: optionsConfig): ModuleWithProviders {\n    return {\n      ngModule: NgxMaskModule,\n    };\n  }\n}\n\n/**\n * @internal\n */\nexport function _configFactory\n(initConfig: optionsConfig, configValue: optionsConfig | (() => optionsConfig)): Function | optionsConfig {\n  return (typeof configValue === 'function') ? configValue() : { ...initConfig, ...configValue };\n}\n"]}